@using PerformanceEvaluatingApp.Controllers;
@model IEnumerable<PerformanceEvaluatingApp.Models.WebPage>

@if (ViewBag.Error == Errors.NoErrors || ViewBag.Error == null)
{
    var erroneous = Model.Where(w => w.RequestTime == 0).ToArray();
    var webPages = Model.Where(w => w.RequestTime != 0).OrderByDescending(w => w.RequestTime);
    int counter = 0, count = Model.Count() - 1 - erroneous.Length;
    <table class="table table-striped table-responsive table-hover">
        <tr class="info">
            <th>Request URI</th>
            <th>Request time</th>
            <th>Date and time of request</th>
        </tr>
        @foreach (var webPage in webPages)
        {
            string @class = "";
            if (counter == 0)
                @class = "class=danger";
            else if (counter == count)
                @class = "class=success";
            <tr @(@class)>
                <td>@webPage.RequestUri</td>
                <td>@webPage.RequestTime</td>
                <td>@webPage.Timestamp</td>
            </tr>
            counter++;
        }
    </table>
    if (erroneous.Length != 0)
    {
        <h3>Errors happened while sending requests to URLs:</h3>
        <table class="table table-striped table-responsive table-hover">
            <tr class="info">
                <th>Request URI</th>
                <th>Date and time of request</th>
            </tr>
            @foreach (var webPage in erroneous)
            {
                <tr class="warning">
                    <td>@webPage.RequestUri</td>
                    <td>@webPage.Timestamp</td>
                </tr>
            }
        </table>
    }
}
else
{
    var errorMessages = new Dictionary<Errors, string>()
    {
        { Errors.BadUrlGiven, "Bad url is given"},
        { Errors.CrawlerError, "Server error happened" }
    };
    <div class="alert alert-danger">
        <strong>@errorMessages[(Errors)ViewBag.Error]</strong>
    </div>
}